{"mappings":"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","sources":["<anon>","apps/privacy-reader/index.js"],"sourcesContent":["var $c2f7b1a6fadecf79$exports = {};\n// index.js\n// This script replaces every character in the blog post with an asterisk, then reveals the true character within 50px of the mouse.\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const container = document.querySelector('.container');\n    if (!container) return;\n    // Slider setup\n    let circleSize = 150;\n    const slider = document.getElementById('slider');\n    const sliderValue = document.getElementById('slider-value');\n    if (slider && sliderValue) slider.addEventListener('input', (e)=>{\n        circleSize = parseInt(slider.value, 10);\n        sliderValue.textContent = circleSize;\n    });\n    // Store the original text and positions\n    let charData = [];\n    // Helper to wrap each character in a span\n    function wrapChars(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const frag = document.createDocumentFragment();\n            for(let i = 0; i < node.textContent.length; i++){\n                const ch = node.textContent[i];\n                const span = document.createElement('span');\n                if (ch === '\\n') span.textContent = ch;\n                else if (ch === ' ') span.textContent = ' ';\n                else span.textContent = '*';\n                span.dataset.trueChar = ch;\n                frag.appendChild(span);\n                charData.push({\n                    span: span,\n                    ch: ch\n                });\n            }\n            node.parentNode.replaceChild(frag, node);\n        } else if (node.nodeType === Node.ELEMENT_NODE && node.childNodes) Array.from(node.childNodes).forEach(wrapChars);\n    }\n    wrapChars(container);\n    // Position cache for each span\n    let positions = [];\n    function updatePositions() {\n        positions = charData.map(({ span: span })=>{\n            const rect = span.getBoundingClientRect();\n            // Add scrollY to y to get document coordinates\n            return {\n                span: span,\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2 + window.scrollY\n            };\n        });\n    }\n    updatePositions();\n    window.addEventListener('resize', updatePositions);\n    // Mouse or accelerometer handler\n    let mx = window.innerWidth / 2;\n    let my = window.innerHeight / 2;\n    function revealAt(mx, my) {\n        positions.forEach(({ span: span, x: x, y: y }, i)=>{\n            const dist = Math.hypot(mx - x, my - y);\n            if (dist < circleSize && charData[i].ch !== '\\n' && charData[i].ch !== ' ') span.textContent = charData[i].ch;\n            else if (charData[i].ch !== '\\n' && charData[i].ch !== ' ') span.textContent = '*';\n            else if (charData[i].ch === ' ') span.textContent = ' ';\n        });\n    }\n    document.addEventListener('mousemove', (e)=>{\n        mx = e.clientX;\n        my = e.clientY + window.scrollY;\n        revealAt(mx, my);\n    });\n    // Accelerometer support for mobile\n    if (window.DeviceOrientationEvent) {\n        let lastX = window.innerWidth / 2;\n        let lastY = window.innerHeight / 2;\n        let baseBeta = null, baseGamma = null;\n        function handleOrientation(event) {\n            // gamma: left/right, beta: front/back\n            if (baseBeta === null) baseBeta = event.beta;\n            if (baseGamma === null) baseGamma = event.gamma;\n            // Sensitivity factor\n            const factor = 8;\n            let dx = (event.gamma - baseGamma) * factor;\n            let dy = (event.beta - baseBeta) * factor;\n            // Clamp to viewport\n            lastX = Math.max(0, Math.min(window.innerWidth, window.innerWidth / 2 + dx));\n            lastY = Math.max(0, Math.min(document.body.scrollHeight, window.scrollY + window.innerHeight / 2 + dy));\n            revealAt(lastX, lastY);\n        }\n        window.addEventListener('deviceorientation', handleOrientation, true);\n        // On touch, reset base orientation\n        window.addEventListener('touchstart', ()=>{\n            baseBeta = null;\n            baseGamma = null;\n        });\n    }\n});\n\n\n//# sourceMappingURL=privacy-reader.090536d7.js.map\n","// index.js\n// This script replaces every character in the blog post with an asterisk, then reveals the true character within 50px of the mouse.\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const container = document.querySelector('.container');\n  if (!container) return;\n\n  // Slider setup\n  let circleSize = 150;\n  const slider = document.getElementById('slider');\n  const sliderValue = document.getElementById('slider-value');\n  if (slider && sliderValue) {\n    slider.addEventListener('input', (e) => {\n      circleSize = parseInt(slider.value, 10);\n      sliderValue.textContent = circleSize;\n    });\n  }\n\n  // Store the original text and positions\n  let charData = [];\n\n  // Helper to wrap each character in a span\n  function wrapChars(node) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      const frag = document.createDocumentFragment();\n      for (let i = 0; i < node.textContent.length; i++) {\n        const ch = node.textContent[i];\n        const span = document.createElement('span');\n        if (ch === '\\n') {\n          span.textContent = ch;\n        } else if (ch === ' ') {\n          span.textContent = ' ';\n        } else {\n          span.textContent = '*';\n        }\n        span.dataset.trueChar = ch;\n        frag.appendChild(span);\n        charData.push({ span, ch });\n      }\n      node.parentNode.replaceChild(frag, node);\n    } else if (node.nodeType === Node.ELEMENT_NODE && node.childNodes) {\n      Array.from(node.childNodes).forEach(wrapChars);\n    }\n  }\n\n  wrapChars(container);\n\n  // Position cache for each span\n  let positions = [];\n  function updatePositions() {\n    positions = charData.map(({ span }) => {\n      const rect = span.getBoundingClientRect();\n      // Add scrollY to y to get document coordinates\n      return {\n        span,\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2 + window.scrollY,\n      };\n    });\n  }\n  updatePositions();\n  window.addEventListener('resize', updatePositions);\n\n  // Mouse or accelerometer handler\n  let mx = window.innerWidth / 2;\n  let my = window.innerHeight / 2;\n\n  function revealAt(mx, my) {\n    positions.forEach(({ span, x, y }, i) => {\n      const dist = Math.hypot(mx - x, my - y);\n      if (dist < circleSize && charData[i].ch !== '\\n' && charData[i].ch !== ' ') {\n        span.textContent = charData[i].ch;\n      } else if (charData[i].ch !== '\\n' && charData[i].ch !== ' ') {\n        span.textContent = '*';\n      } else if (charData[i].ch === ' ') {\n        span.textContent = ' ';\n      }\n    });\n  }\n\n  document.addEventListener('mousemove', (e) => {\n    mx = e.clientX;\n    my = e.clientY + window.scrollY;\n    revealAt(mx, my);\n  });\n\n  // Accelerometer support for mobile\n  if (window.DeviceOrientationEvent) {\n    let lastX = window.innerWidth / 2;\n    let lastY = window.innerHeight / 2;\n    let baseBeta = null, baseGamma = null;\n\n    function handleOrientation(event) {\n      // gamma: left/right, beta: front/back\n      if (baseBeta === null) baseBeta = event.beta;\n      if (baseGamma === null) baseGamma = event.gamma;\n      // Sensitivity factor\n      const factor = 8;\n      let dx = (event.gamma - baseGamma) * factor;\n      let dy = (event.beta - baseBeta) * factor;\n      // Clamp to viewport\n      lastX = Math.max(0, Math.min(window.innerWidth, window.innerWidth / 2 + dx));\n      lastY = Math.max(0, Math.min(document.body.scrollHeight, window.scrollY + window.innerHeight / 2 + dy));\n      revealAt(lastX, lastY);\n    }\n\n    window.addEventListener('deviceorientation', handleOrientation, true);\n    // On touch, reset base orientation\n    window.addEventListener('touchstart', () => {\n      baseBeta = null;\n      baseGamma = null;\n    });\n  }\n});\n"],"names":["document","addEventListener","container","querySelector","circleSize","slider","getElementById","sliderValue","e","textContent","parseInt","value","charData","wrapChars","node","nodeType","Node","TEXT_NODE","frag","createDocumentFragment","i","length","ch","span","createElement","dataset","trueChar","appendChild","push","parentNode","replaceChild","ELEMENT_NODE","childNodes","Array","from","forEach","positions","updatePositions","map","rect","getBoundingClientRect","x","left","width","y","top","height","window","scrollY","mx","innerWidth","my","innerHeight","revealAt","dist","Math","hypot","clientX","clientY","DeviceOrientationEvent","lastX","lastY","baseBeta","baseGamma","event","beta","gamma","dx","dy","max","min","body","scrollHeight"],"version":3,"file":"privacy-reader.090536d7.js.map"}